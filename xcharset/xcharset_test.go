package xcharset

import (
	"github.com/Aoi-hosizora/ahlib/xtesting"
	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/encoding/unicode"
	"testing"
)

func TestDetect(t *testing.T) {
	for _, tc := range []struct {
		name         string
		give         []byte
		wantCharset  string
		wantLanguage string
		wantOk       bool
	}{
		{"empty", []byte{}, "UTF-8", "", true},
		{"FF", []byte{0xff}, "", "", false},
		{"EF_BB_BF", []byte{0xef, 0xbb, 0xbf}, "UTF-8", "", true},
		{"EF_BF_BD", []byte{0xef, 0xbf, 0xbd}, "UTF-8", "", true},
		// 英语 Latin1 编码：Go is an ...
		{"English_ISO8859", []byte(`Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. Build fast, reliable, and efficient software at scale.`), "ISO-8859-1", "en", true},
		// 简体中文编码：测试文本。
		{"Chinese_UTF8", []byte{0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xef, 0xbc, 0x9a, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe3, 0x80, 0x82}, "UTF-8", "", true},
		{"Chinese_GB18030", []byte{0xbc, 0xf2, 0xcc, 0xe5, 0xd6, 0xd0, 0xce, 0xc4, 0xb1, 0xe0, 0xc2, 0xeb, 0xa3, 0xba, 0xb2, 0xe2, 0xca, 0xd4, 0xce, 0xc4, 0xb1, 0xbe, 0xa1, 0xa3}, "GB18030", "zh", true},
		// 繁體中文編碼：測試文本。
		{"Chinese_Hant_UTF8", []byte{0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7, 0xb7, 0xa8, 0xe7, 0xa2, 0xbc, 0xef, 0xbc, 0x9a, 0xe6, 0xb8, 0xac, 0xe8, 0xa9, 0xa6, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe3, 0x80, 0x82}, "UTF-8", "", true},
		{"Chinese_Hant_BIG5", []byte{0xc1, 0x63, 0xc5, 0xe9, 0xa4, 0xa4, 0xa4, 0xe5, 0xbd, 0x73, 0xbd, 0x58, 0xa1, 0x47, 0xb4, 0xfa, 0xb8, 0xd5, 0xa4, 0xe5, 0xa5, 0xbb, 0xa1, 0x43}, "Big5", "zh", true},
		{"Chinese_Hant_GB18030", []byte{0xb7, 0xb1, 0xf3, 0x77, 0xd6, 0xd0, 0xce, 0xc4, 0xbe, 0x8e, 0xb4, 0x61, 0xa3, 0xba, 0x9c, 0x79, 0xd4, 0x87, 0xce, 0xc4, 0xb1, 0xbe, 0xa1, 0xa3}, "GB18030", "zh", true},
		// 日本語コーディング：テス
		{"Japanese_UTF8", []byte{0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e, 0xe3, 0x82, 0xb3, 0xe3, 0x83, 0xbc, 0xe3, 0x83, 0x87, 0xe3, 0x82, 0xa3, 0xe3, 0x83, 0xb3, 0xe3, 0x82, 0xb0, 0xef, 0xbc, 0x9a, 0xe3, 0x83, 0x86, 0xe3, 0x82, 0xb9}, "UTF-8", "", true},
		{"Japanese_ShiftJIS", []byte{0x93, 0xFA, 0x96, 0x7B, 0x8C, 0xEA, 0x83, 0x52, 0x81, 0x5B, 0x83, 0x66, 0x83, 0x42, 0x83, 0x93, 0x83, 0x4F, 0x81, 0x46, 0x83, 0x65, 0x83, 0x58}, "Shift_JIS", "ja", true},
		{"Japanese_EUCJP", []byte{0xc6, 0xfc, 0xcb, 0xdc, 0xb8, 0xec, 0xa5, 0xb3, 0xa1, 0xbc, 0xa5, 0xc7, 0xa5, 0xa3, 0xa5, 0xf3, 0xa5, 0xb0, 0xa1, 0xa7, 0xa5, 0xc6, 0xa5, 0xb9}, "EUC-JP", "ja", true},
		{"Japanese_ISO2022", []byte{0x1b, 0x24, 0x42, 0x46, 0x7c, 0x4b, 0x5c, 0x38, 0x6c, 0x25, 0x33, 0x21, 0x3c, 0x25, 0x47, 0x25, 0x23, 0x25, 0x73, 0x25, 0x30, 0x21, 0x27, 0x25, 0x46, 0x25, 0x39, 0x1b, 0x28, 0x42}, "ISO-2022-JP", "ja", true},
	} {
		t.Run(tc.name, func(t *testing.T) {
			result, ok := DetectBestCharset(tc.give)
			xtesting.Equal(t, ok, tc.wantOk)
			if ok {
				xtesting.Equal(t, result.Charset, tc.wantCharset)
				xtesting.Equal(t, result.Language, tc.wantLanguage)
			}

			results, ok := DetectAllCharsets(tc.give)
			xtesting.Equal(t, ok, tc.wantOk)
			if ok {
				xtesting.Equal(t, results[0].Charset, tc.wantCharset)
				xtesting.Equal(t, results[0].Language, tc.wantLanguage)
			}
		})
	}
}

func TestEncode(t *testing.T) {
	dest, err := EncodeString(unicode.UTF8, "test")
	xtesting.Nil(t, err)
	xtesting.Equal(t, dest, "test")

	dest, err = EncodeString(japanese.ShiftJIS, "测试")
	xtesting.NotNil(t, err)

	dest2, err := EncodeBytes(unicode.UTF8, []byte("test"))
	xtesting.Nil(t, err)
	xtesting.Equal(t, dest2, []byte("test"))

	dest2, err = EncodeBytes(japanese.ShiftJIS, []byte("测试"))
	xtesting.NotNil(t, err)
}

func TestDecode(t *testing.T) {
	dest, err := DecodeString(unicode.UTF8, "test")
	xtesting.Nil(t, err)
	xtesting.Equal(t, dest, "test")

	dest2, err := DecodeBytes(unicode.UTF8, []byte("test"))
	xtesting.Nil(t, err)
	xtesting.Equal(t, dest2, []byte("test"))
}

func TestGetEncoding(t *testing.T) {
	for _, tc := range []struct {
		give   string
		wantOk bool
	}{
		{"", false},
		{IANA_UTF8, true},
		{IANA_UTF16BE, true},
		{IANA_UTF16LE, true},
		{IANA_UTF32BE, true},
		{IANA_UTF32LE, true},
		{IANA_ISO8859_1, true},
		{IANA_ISO8859_2, true},
		{IANA_ISO8859_5, true},
		{IANA_ISO8859_6, true},
		{IANA_ISO8859_7, true},
		{IANA_ISO8859_8, true},
		{IANA_ISO8859_8I, true},
		{IANA_ISO8859_9, true},
		{IANA_KOI8R, true},
		{IANA_WINDOWS1251, true},
		{IANA_WINDOWS1256, true},
		{IANA_IBM424RTL, false},
		{IANA_IBM424LTR, false},
		{IANA_IBM420RTL, false},
		{IANA_IBM420LTR, false},
		{IANA_SHIFTJIS, true},
		{IANA_GBK, true},
		{IANA_GB18030, true},
		{IANA_BIG5, true},
		{IANA_EUCJP, true},
		{IANA_EUCKR, true},
		{IANA_ISO2022JP, true},
		{IANA_ISO2022KR, false},
		{IANA_ISO2022CN, false},
	} {
		_, ok := GetEncoding(tc.give)
		xtesting.Equal(t, ok, tc.wantOk)
	}
}
